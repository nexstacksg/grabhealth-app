generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String              @id @default(cuid())
  email                        String              @unique
  password                     String
  firstName                    String
  lastName                     String
  role                         String              @default("USER")
  status                       String              @default("PENDING_VERIFICATION")
  profileImage                 String?
  referralCode                 String?             @unique
  uplineId                     String?
  refreshToken                 String?
  lastLoginAt                  DateTime?
  emailVerificationToken       String?
  emailVerifiedAt              DateTime?
  emailVerificationCode        String?
  emailVerificationCodeExpires DateTime?
  passwordResetToken           String?
  passwordResetExpires         DateTime?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  partnerId                    String?
  accountRequests              AccountRequest[]
  auditLogs                    AuditLog[]
  bookings                     Booking[]
  commissionsReceived          Commission[]        @relation("RecipientCommissions")
  commissionsGenerated         Commission[]        @relation("UserCommissions")
  verificationCodes            EmailVerification[]
  freeCheckupClaims            FreeCheckupClaim[]
  orders                       Order[]
  partner                      Partner?            @relation(fields: [partnerId], references: [id])
  upline                       User?               @relation("UplineDownline", fields: [uplineId], references: [id])
  downlines                    User[]              @relation("UplineDownline")
  membership                   UserMembership?
  points                       UserPoints?
  uplineFor                    UserRelationship[]  @relation("UplineRelationships")
  relationships                UserRelationship[]  @relation("UserRelationships")
  userRoles                    UserRole[]

  @@index([email])
  @@index([referralCode])
  @@index([partnerId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String?
  changes   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  imageUrl    String?
  parentId    Int?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([slug])
  @@index([parentId])
}

model Product {
  id                 Int                    @id @default(autoincrement())
  name               String
  description        String?
  categoryId         Int?
  imageUrl           String?
  inStock            Boolean                @default(true)
  status             String                 @default("ACTIVE")
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  sku                String?                @unique
  commissions        Commission[]
  orderItems         OrderItem[]
  category           Category?              @relation(fields: [categoryId], references: [id])
  productCommissions ProductCommissionTier?
  productPricing     ProductPricing?

  @@index([categoryId])
  @@index([status])
  @@index([sku])
}

model Order {
  id              Int          @id @default(autoincrement())
  userId          String
  total           Float        @default(0)
  subtotal        Float        @default(0)
  discount        Float        @default(0)
  tax             Float        @default(0)
  status          String       @default("PENDING")
  paymentStatus   String       @default("PENDING")
  paymentMethod   String?
  shippingAddress String?
  billingAddress  String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  commissions     Commission[]
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]

  @@index([userId, status])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id          Int          @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int          @default(1)
  price       Float
  discount    Float        @default(0)
  createdAt   DateTime     @default(now())
  pvPoints    Int          @default(0)
  commissions Commission[]
  order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model MembershipTier {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  price           Float            @default(0)
  benefits        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userMemberships UserMembership[]
}

model UserMembership {
  id        Int            @id @default(autoincrement())
  userId    String         @unique
  tierId    Int
  status    String         @default("ACTIVE")
  startDate DateTime       @default(now())
  endDate   DateTime?
  autoRenew Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  tier      MembershipTier @relation(fields: [tierId], references: [id])
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model UserRelationship {
  id                Int      @id @default(autoincrement())
  userId            String
  uplineId          String?
  relationshipLevel Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  upline            User?    @relation("UplineRelationships", fields: [uplineId], references: [id])
  user              User     @relation("UserRelationships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, uplineId])
  @@index([userId])
  @@index([uplineId])
}

model CommissionTier {
  id                     Int      @id @default(autoincrement())
  tierLevel              Int      @unique
  tierName               String
  directCommissionRate   Float
  indirectCommissionRate Float
  pointsRate             Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Commission {
  id                Int        @id @default(autoincrement())
  orderId           Int
  userId            String
  recipientId       String
  amount            Float
  commissionRate    Float
  relationshipLevel Int
  type              String     @default("DIRECT")
  status            String     @default("PENDING")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  orderItemId       Int?
  productId         Int?
  pvPoints          Int        @default(0)
  recipientRole     String?
  order             Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItem         OrderItem? @relation(fields: [orderItemId], references: [id])
  product           Product?   @relation(fields: [productId], references: [id])
  recipient         User       @relation("RecipientCommissions", fields: [recipientId], references: [id], onDelete: Cascade)
  user              User       @relation("UserCommissions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([orderItemId])
  @@index([productId])
  @@index([userId])
  @@index([recipientId])
  @@index([status])
  @@index([recipientRole])
}

model UserPoints {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductPricing {
  id                 Int      @id @default(autoincrement())
  productId          Int      @unique
  pvValue            Int
  customerPrice      Float
  travelPackagePrice Float?
  costPrice          Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductCommissionTier {
  id                      Int      @id @default(autoincrement())
  productId               Int      @unique
  productName             String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  leaderCommissionAmount  Float
  leaderCommissionRate    Float    @default(0.10)
  managerCommissionAmount Float
  managerCommissionRate   Float    @default(0.05)
  salesCommissionAmount   Float
  salesCommissionRate     Float    @default(0.30)
  product                 Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model UserRoleType {
  id                   Int        @id @default(autoincrement())
  roleName             String     @unique
  description          String?
  commissionMultiplier Float      @default(1.0)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  userRoles            UserRole[]
}

model UserRole {
  id        Int          @id @default(autoincrement())
  userId    String
  roleId    Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  role      UserRoleType @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model VolumeBonusTier {
  id              Int      @id @default(autoincrement())
  minVolume       Float
  maxVolume       Float?
  bonusPercentage Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([minVolume])
}

model GiftItem {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  requiredPurchases Int
  imageUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Promotion {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  discountType  String
  discountValue Float
  minPurchase   Float?
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([isActive])
  @@index([startDate, endDate])
}

model AccountRequest {
  id             Int       @id @default(autoincrement())
  userId         String
  requestType    String
  requestDetails String?
  status         String    @default("PENDING")
  adminNotes     String?
  processedAt    DateTime?
  processedBy    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    String
  email     String
  code      String
  type      String   @default("login")
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, code])
  @@index([userId, type])
}

model Partner {
  id              String                @id @default(cuid())
  name            String
  description     String?
  address         String
  city            String
  state           String
  country         String                @default("Singapore")
  postalCode      String
  phone           String
  email           String                @unique
  website         String?
  imageUrl        String?
  rating          Float                 @default(0)
  totalReviews    Int                   @default(0)
  isActive        Boolean               @default(true)
  operatingHours  String?
  specializations String[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  bookings        Booking[]
  availability    PartnerAvailability[]
  daysOff         PartnerDaysOff[]
  services        Service[]
  users           User[]

  @@index([city])
  @@index([isActive])
}

model Service {
  id                String    @id @default(cuid())
  partnerId         String
  name              String
  description       String?
  duration          Int
  price             Float
  category          String
  isActive          Boolean   @default(true)
  requiresApproval  Boolean   @default(false)
  maxBookingsPerDay Int       @default(10)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bookings          Booking[]
  partner           Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([partnerId])
  @@index([category])
  @@index([isActive])
}

model PartnerAvailability {
  id                 String   @id @default(cuid())
  partnerId          String
  dayOfWeek          Int
  startTime          String
  endTime            String
  slotDuration       Int      @default(30)
  maxBookingsPerSlot Int      @default(1)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  partner            Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, dayOfWeek])
  @@index([partnerId])
}

model PartnerDaysOff {
  id            String   @id @default(cuid())
  partnerId     String
  date          DateTime @db.Date
  reason        String?
  isRecurring   Boolean  @default(false)
  createdAt     DateTime @default(now())
  dayOfWeek     Int?
  recurringType String?
  partner       Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, date])
  @@index([partnerId])
  @@index([date])
  @@index([partnerId, recurringType, dayOfWeek])
}

model Booking {
  id                 String            @id @default(cuid())
  userId             String
  partnerId          String
  serviceId          String
  bookingDate        DateTime
  startTime          String
  endTime            String
  status             String            @default("PENDING")
  notes              String?
  cancellationReason String?
  isFreeCheckup      Boolean           @default(false)
  totalAmount        Float
  paymentStatus      String            @default("PENDING")
  paymentMethod      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  partner            Partner           @relation(fields: [partnerId], references: [id])
  service            Service           @relation(fields: [serviceId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  freeCheckupClaim   FreeCheckupClaim? @relation("BookingCheckupClaim")

  @@index([userId])
  @@index([partnerId])
  @@index([bookingDate])
  @@index([status])
}

model FreeCheckupClaim {
  id            String   @id @default(cuid())
  userId        String
  claimDate     DateTime @default(now())
  expiryDate    DateTime
  status        String   @default("ACTIVE")
  usedBookingId String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  usedBooking   Booking? @relation("BookingCheckupClaim", fields: [usedBookingId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, status])
  @@index([userId])
  @@index([status])
  @@index([expiryDate])
}
