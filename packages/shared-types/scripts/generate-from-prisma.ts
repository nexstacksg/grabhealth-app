#!/usr/bin/env node

/**
 * Script to generate base types from Prisma schema
 * This ensures our shared-types always match the database schema
 */

import { execSync } from 'child_process';
import { writeFileSync, readFileSync } from 'fs';
import path from 'path';

const PRISMA_SCHEMA_PATH = '../../apps/app-be/prisma/schema.prisma';
const OUTPUT_DIR = './src/generated';

// Generate Prisma types
try {
  console.log('üîÑ Generating types from Prisma schema...');
  
  // Generate Prisma client (this creates the types)
  execSync('cd ../../apps/app-be && bun run prisma:generate', { stdio: 'inherit' });
  
  // Copy generated types to shared-types
  const prismaTypesPath = '../../apps/app-be/node_modules/.prisma/client/index.d.ts';
  const prismaTypes = readFileSync(prismaTypesPath, 'utf8');
  
  // Extract model types and create our base types
  const baseTypes = extractPrismaModels(prismaTypes);
  
  writeFileSync(path.join(OUTPUT_DIR, 'prisma-types.ts'), baseTypes);
  
  console.log('‚úÖ Successfully generated base types from Prisma!');
  
} catch (error) {
  console.error('‚ùå Error generating types:', error);
  process.exit(1);
}

function extractPrismaModels(prismaTypes: string): string {
  // This would parse the Prisma-generated types and extract model interfaces
  // For now, we'll create a basic template
  return `
// AUTO-GENERATED FROM PRISMA SCHEMA
// DO NOT EDIT THIS FILE DIRECTLY
// Run 'bun run generate:prisma' to regenerate

import type { User as PrismaUser, Product as PrismaProduct, Order as PrismaOrder } from '@prisma/client';

// Base types directly from Prisma
export type { 
  User as IPrismaUser,
  Product as IPrismaProduct, 
  Order as IPrismaOrder,
  OrderItem as IPrismaOrderItem
} from '@prisma/client';

// Re-export for backwards compatibility
export type IUser = PrismaUser;
export type IProduct = PrismaProduct;
export type IOrder = PrismaOrder;
`;
}