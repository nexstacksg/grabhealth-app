# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    - name: Setup environment files
      run: |
        # Copy .env files from /root/ to project directories
        # Source files: .app-admin.env, .app-be.env, .app-web.env
        # Target: .env in each respective app directory
        
        # Check if source files exist
        if [ ! -f "/root/.app-admin.env" ] || [ ! -f "/root/.app-be.env" ] || [ ! -f "/root/.app-web.env" ]; then
          echo "Error: One or more source .env files not found in /root/"
          exit 1
        fi
        
        # Copy and rename to .env with restricted permissions
        cp /root/.app-admin.env ./apps/app-admin/.env
        chmod 600 ./apps/app-admin/.env
        
        cp /root/.app-be.env ./apps/app-be/.env
        chmod 600 ./apps/app-be/.env
        
        cp /root/.app-web.env ./apps/app-web/.env
        chmod 600 ./apps/app-web/.env
        
        echo "Environment files copied successfully"
    - name: Install dependencies
      run: bun install
    - name: Generate Prisma Client
      run: |
        cd apps/app-be
        bunx prisma generate
    - name: Build
      run: bun run build
    # - name: Test
    #   run: bun run test
    - name: Restart PM2 processes
      run: |
        # Set PM2 home directory
        export PM2_HOME=/root/.pm2
        
        # Try to connect to PM2 daemon, start it if not running
        if ! /usr/bin/pm2 ping > /dev/null 2>&1; then
          echo "PM2 daemon not running, starting it..."
          /usr/bin/pm2 resurrect || echo "No dump file found, skipping resurrect"
        fi
        
        # List current PM2 processes
        echo "Current PM2 processes:"
        /usr/bin/pm2 list
        
        # Stop and delete all processes if they exist
        /usr/bin/pm2 delete all || true
        
        # Start applications using ecosystem config
        echo "Starting applications with ecosystem config..."
        /usr/bin/pm2 start ecosystem.config.js --update-env
        
        # Show final PM2 status
        echo "Final PM2 status:"
        /usr/bin/pm2 list
        
        # Save PM2 process list
        /usr/bin/pm2 save --force
